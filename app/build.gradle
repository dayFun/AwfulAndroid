buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.fernandocejas.frodo'

ext {
    supportLibraryVersion = '23.2.1'
    guavaVersion = '18.0'
    glideVersion = '3.6.1'
    junitVersion = '4.12'
    mockitoVersion = '1.10.19'
    powerMockito = '1.6.2'
    hamcrestVersion = '1.3'
    runnerVersion = '0.4.1'
    rulesVersion = '0.4.1'
    espressoVersion = '2.2.1'
    daggerVersion = '2.2'
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.lighthouse.awfulandroid"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "forecastKey", project.getProperties().get("forecastKey")
        }

        debug {
            applicationIdSuffix = ".debug"
            resValue "string", "forecastKey", project.getProperties().get("forecastKey")
        }
    }

    productFlavors {
        dev {
            applicationIdSuffix = "com.lighthouse.awfulandroid.dev"
        }

        prod {
            applicationIdSuffix = "com.lighthouse.awfulandroid.prod"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.force "com.android.support:support-annotations:${supportLibraryVersion}"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    provided 'org.projectlombok:lombok:1.16.8'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'io.reactivex:rxandroid:0.24.0'
    compile 'io.reactivex:rxjava-joins:0.22.0'
    compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
    compile "com.android.support:design:${supportLibraryVersion}"
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'com.jakewharton.rxbinding:rxbinding-appcompat-v7:0.4.0'
    compile 'com.f2prateek.rx.preferences:rx-preferences:1.0.1'
    compile 'io.reactivex:rxjava-debug:1.0.3'
    compile 'com.squareup.retrofit:retrofit:1.9.0'

    // Dependency Injection
    compile "com.google.dagger:dagger:${daggerVersion}"
    apt "com.google.dagger:dagger-compiler:${daggerVersion}"
    provided 'javax.annotation:jsr250-api:1.0'

    // Dependencies for local unit tests
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile "org.powermock:powermock-module-junit4:${powerMockito}"
    testCompile "org.powermock:powermock-api-mockito:${powerMockito}"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:${runnerVersion}"
    androidTestCompile "com.android.support.test:rules:${runnerVersion}"

    // Espresso UI Testing dependencies.
    androidTestCompile "com.android.support.test.espresso:espresso-core:${espressoVersion}"
//    androidTestCompile "com.android.support.test.espresso:espresso-contrib:${espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${espressoVersion}"
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
}

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def crashlyticsSecret = project.getProperties().get("crashlyticsSecret")
        def crashlyticsKey = project.getProperties().get("crashlyticsKey")
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: crashlyticsSecret)
            entry(key: "apiKey", value: crashlyticsKey)
        }
    }
}

